/*
 * Copyright (C) 2022 Bushra "Bedirhan" KURT. All Rights Reserved.
 * 
 * SPDX-License-Identifier: GPL-2.0-only
 * 
 * Reference-Link: https://www.youtube.com/watch?v=qAWhGEPMlS8
 * 
 * Some of the code here is generated by OpenAI and self-adapted to work securely and properly.
 * 
 */

using System;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using static System.Console;

namespace ce103_hw3
{
    internal class Lbrrn
    {
        public void LbrrnLogin()
        {
            // Password: loginpass
            byte[] correctpasshash = Convert.FromBase64String("DxeVeykH3PIGM55NXBnylM0Rh9413S3FLTnAtCrET9c=");

            WriteLine(@"Welcome, Librarian.

This application is password-protected. If you don't have a password, please consult your system administrator for it.

Passwords are coded inside through the source code and cannot be changed unless it's changed in source code before compiling.

If you want to exit the app instead, simply hit Ctrl+C.");

            #region Feat. OpenAI ChatGPT (Free Research Preview)
            // Create a string builder to store the password
            StringBuilder enteredpassbuilder = new StringBuilder();

            // Read each key press from the console, without displaying it
            while (true)
            {
                // Read the next key press from the console
                ConsoleKeyInfo key = Console.ReadKey(true);

                // Check if the key press is Enter (to submit the password), Backspace (to delete a character), or Escape (to exit the app)
                if (key.Key == ConsoleKey.Enter)
                {
                    // The password has been entered, so break out of the loop
                    break;
                }
                else if (key.Key == ConsoleKey.Backspace)
                {
                    // The user pressed Backspace, so remove the last character from the password
                    if (enteredpassbuilder.Length > 0)
                    {
                        enteredpassbuilder.Remove(enteredpassbuilder.Length - 1, 1);

                        // Move the cursor back one character and write a space to clear the last character from the screen
                        Console.CursorLeft--;
                        Console.Write(" ");
                        Console.CursorLeft--;
                    }
                }
                else if (key.Key == ConsoleKey.Escape)
                {
                    // The user pressed Escape, so exit the app
                    Environment.Exit(0);
                }
                else
                {
                    // The user entered a regular key, so add it to the password and write an asterisk to the screen
                    enteredpassbuilder.Append(key.KeyChar);
                    Console.Write("*");
                }
            }

            string enteredpass = enteredpassbuilder.ToString();
            byte[] enteredpasshash = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(enteredpass));
            #endregion

            if (correctpasshash.SequenceEqual(enteredpasshash))
            {
                LbrrnMain lbrrnMain= new LbrrnMain();
                lbrrnMain.LbrrnMenu();
            }
            else
            {
                WriteLine("The password you entered is incorrect. Verification failed. Exiting...");
            }
        }
    }
}
